# -*- coding: utf-8 -*-
import configparser
import os
import time
from datetime import datetime
import telebot
from telebot.util import async_dec
import random

from src import gonal_const as const
from src import gonal_admin as admin
import gonal_database as shop_db
import gonal_payment as payment
import gonal_strings as string_help

bot = telebot.AsyncTeleBot(admin.TOKEN, parse_mode="MARKDOWN")

admin_keyboard = telebot.types.ReplyKeyboardMarkup(True)
admin_keyboard.row(const.BUY, const.FAQ)
admin_keyboard.row(const.ITEMS_WORK, const.WORK_PAY)
admin_keyboard.row(const.STAT)
admin_keyboard.row(const.REVIEW)
admin_keyboard.row(const.OTHER)

user_keyboard = telebot.types.ReplyKeyboardMarkup(True)
user_keyboard.row(const.BUY, const.FAQ)
user_keyboard.row(const.REVIEW)

database = shop_db.ShopDB()

payment.database = database
payment.comment = admin.COMMENT_PAY
qiwi = payment.Qiwi()

@bot.message_handler(commands=['start'])
def start_message(message):
    if admin.is_admin(message.from_user.id):
        bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –∫–Ω–æ–ø–∫–∏, –Ω–∞–ø–∏—à–∏—Ç–µ /start',
                         reply_markup=admin_keyboard)
    else:
        bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –∫–Ω–æ–ø–∫–∏, –Ω–∞–ø–∏—à–∏—Ç–µ /start',
                         reply_markup=user_keyboard)
    database.input_user(message.chat.id)


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    # –ö—É–ø–∏—Ç—å
    if message.text == const.BUY:
        keyboard, count = get_categories("select_category=")
        if count:
            bot.send_message(message.from_user.id, "üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", reply_markup=keyboard)
        else:
            bot.send_message(message.from_user.id, "üòî –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

    # FAQ
    elif message.text == const.FAQ:
        bot.send_message(message.chat.id, database.get_faq(), parse_mode="HTML")

    # –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤
    elif message.text == const.REVIEW:
        if admin.is_admin(message.from_user.id):
            keyboard = telebot.types.ReplyKeyboardMarkup(True)
            keyboard.row(const.SUPPORT, const.SUPPORT_HISTORY)
            keyboard.row(const.SUPPORT_MES)
            keyboard.row(const.BACK)
            bot.send_message(message.chat.id, const.REVIEW, reply_markup=keyboard)
        else:
            bot.send_message(message.from_user.id, database.get_support_main_mes(), parse_mode="HTML")

            keyboard = telebot.types.InlineKeyboardMarkup()
            keyboard.add(telebot.types.InlineKeyboardButton(text="‚ùì –í–æ–ø—Ä–æ—Å", callback_data="support_user=‚ùì –í–æ–ø—Ä–æ—Å"))
            keyboard.add(telebot.types.InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∞", callback_data="support_user=üí≥ –û–ø–ª–∞—Ç–∞"))
            keyboard.add(telebot.types.InlineKeyboardButton(text="üìö –¢–æ–≤–∞—Ä—ã", callback_data="support_user=üìö –¢–æ–≤–∞—Ä—ã"))
            keyboard.add(telebot.types.InlineKeyboardButton(text="üìù –ü—Ä–æ—á–µ–µ", callback_data="support_user=üìù –ü—Ä–æ—á–µ–µ"))
            keyboard.add(telebot.types.InlineKeyboardButton(text=const.BACK, callback_data="cancel"))
            bot.send_message(message.from_user.id, "üìù –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—Ä–∞—â–µ–Ω–∏—è", reply_markup=keyboard)

    # –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å
    # –ü—Ä–æ—á–µ–µ
    elif message.text == const.OTHER and admin.is_admin(message.from_user.id):
        keyboard = telebot.types.ReplyKeyboardMarkup(True)
        keyboard.row(const.SENDING)
        keyboard.row(const.EDIT_FAQ)
        keyboard.row(const.BACK)
        bot.send_message(message.chat.id, const.OTHER, reply_markup=keyboard)

    # –†–∞—Å—Å—ã–ª–∫–∏
    elif message.text == const.SENDING and admin.is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
        bot.register_next_step_handler(message, create_sending)

    # –û–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
    elif message.text == const.SUPPORT and admin.is_admin(message.from_user.id):
        get_support_messages(message, False)

    # –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    elif message.text == const.SUPPORT_HISTORY and admin.is_admin(message.from_user.id):
        get_support_messages(message, True)

    # –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    elif message.text == const.SUPPORT_MES and admin.is_admin(message.from_user.id):
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton(text="‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                                                        callback_data="edit_supmes"))
        bot.send_message(message.from_user.id, database.get_support_main_mes(), reply_markup=keyboard)

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FAQ
    elif message.text == const.EDIT_FAQ and admin.is_admin(message.from_user.id):
        bot.send_message(message.from_user.id, "‚úí –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç FAQ")
        bot.register_next_step_handler(message, edit_faq)

    # –†–∞–±–æ—Ç–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    elif message.text == const.ITEMS_WORK and admin.is_admin(message.from_user.id):
        keyboard = telebot.types.ReplyKeyboardMarkup(True)
        keyboard.row(const.ADD_ITEM, const.DELETE_ITEM)
        keyboard.row(const.ADD_CATEGORY, const.DELETE_CATEGORY)
        keyboard.row(const.BACK)
        bot.send_message(message.chat.id, const.ITEMS_WORK, reply_markup=keyboard)

    # –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
    elif message.text == const.ADD_ITEM and admin.is_admin(message.from_user.id):
        keyboard, b = get_categories("category=")

        if b:
            bot.send_message(message.chat.id, "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞", reply_markup=keyboard)
        else:
            bot.send_message(message.chat.id, "üòî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

    # –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
    elif message.text == const.DELETE_ITEM and admin.is_admin(message.from_user.id):
        keyboard, b = get_categories("cat_del=")

        if b:
            bot.send_message(message.chat.id, "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞", reply_markup=keyboard)
        else:
            bot.send_message(message.chat.id, "üòî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

    # –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    elif message.text == const.ADD_CATEGORY and admin.is_admin(message.from_user.id):
        keyboard, b = get_categories("sub_cat_add=")

        keyboard.add(telebot.types.InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                                                        callback_data="category=new_category"))
        bot.send_message(message.chat.id, "üìÇ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \n"
                                          "üìÅ –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é*",
                         reply_markup=keyboard)

    # –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    elif message.text == const.DELETE_CATEGORY and admin.is_admin(message.from_user.id):
        keyboard, b = get_categories("categ_del=")
        if b:
            bot.send_message(message.chat.id, "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=keyboard)
        else:
            bot.send_message(message.chat.id, "üòî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

    # –†–∞–±–æ—Ç–∞ —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏
    elif message.text == const.WORK_PAY and admin.is_admin(message.from_user.id):
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton(text="ü•ù QIWI", callback_data="payment=qiwi"))

        bot.send_message(message.chat.id, "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫", reply_markup=keyboard)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    elif message.text == const.STAT and admin.is_admin(message.from_user.id):
        keyboard = telebot.types.ReplyKeyboardMarkup(True)
        keyboard.row(const.REPORT, const.GENERAL)
        keyboard.row(const.BACK)
        bot.send_message(message.chat.id, const.STAT, reply_markup=keyboard)

    # –û—Ç—á–µ—Ç—ã
    elif message.text == const.REPORT and admin.is_admin(message.from_user.id):
        create_date_list()
        keyboard = create_report_keyboard(0)

        bot.send_message(message.from_user.id, "üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞", reply_markup=keyboard)

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∫–∞
    elif message.text == const.GENERAL and admin.is_admin(message.from_user.id):
        keyboard = telebot.types.InlineKeyboardMarkup()
        user_count = len(database.get_user_list())
        sales_list = database.get_sales()
        sales_len = len(sales_list)

        sales_sum = 0
        sales_most = dict()
        buyers_most = dict()
        for i in range(sales_len):
            sales_sum += int(sales_list[i][4])

            buyer = sales_list[i][0]
            name = sales_list[i][1]
            if name in sales_most:
                sales_most.update({name: int(sales_most.get(name)) + 1})
            else:
                sales_most[name] = int(1)

            if buyer in buyers_most:
                buyers_most.update({buyer: int(buyers_most.get(buyer) + 1)})
            else:
                buyers_most[buyer] = int(1)


        sales_sort = sorted(sales_most, key=sales_most.get, reverse=True)
        buyers_sort = sorted(buyers_most, key=buyers_most.get, reverse=True)

        sales_list = {}
        buyers_list = {}
        for i in sales_sort:
            sales_list[i] = sales_most[i]
        for i in buyers_sort:
            buyers_list[i] = buyers_most[i]

        sales = get_ten_data(sales_sort, sales_most)
        buyers = get_ten_data(buyers_sort, buyers_most)

        msg = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞\n\n" \
              f"üíª –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n" \
              f"üí∞ –ü—Ä–∏–±—ã–ª—å –º–∞–≥–∞–∑–∏–Ω–∞: {sales_sum} —Ä—É–±.\n\n" \
              f"üõí –ß–∞—Å—Ç–æ –ø–æ–∫—É–ø–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã: \n{sales}\n" \
              f"üí≥ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏: \n{buyers}"

        keyboard.add(telebot.types.InlineKeyboardButton(text=const.CLOSE,
                                                        callback_data="cancel"))
        bot.send_message(message.from_user.id, msg, reply_markup=keyboard)


    # –ù–∞–∑–∞–¥
    elif message.text == const.BACK:
        if admin.is_admin(message.from_user.id):
            bot.send_message(message.chat.id, "üîπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîπ", reply_markup=admin_keyboard)
        else:
            bot.send_message(message.chat.id, "üîπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîπ", reply_markup=user_keyboard)

    # –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    else:
        if admin.is_admin(message.from_user.id):
            bot.send_message(message.from_user.id, "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞! –í–≤–µ–¥–∏—Ç–µ /start",
                             reply_markup=admin_keyboard)
        else:
            bot.send_message(message.from_user.id, "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞! –í–≤–µ–¥–∏—Ç–µ /start",
                             reply_markup=user_keyboard)

def get_ten_data(dict, list):
    count = 0
    data = ""
    while count < 10 and count < len(list):
        data += f"‚ñ´ {dict[count]} ‚Äì {list.get(dict[count])}\n"
        count += 1

    return data

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ—Ç—á–µ—Ç–∞–º–∏
def create_report_keyboard(cur_page):
    page = int(cur_page)
    next_page = page + 10
    keyboard = telebot.types.InlineKeyboardMarkup()
    while page < next_page and page < len(date_sort):
        date = date_sort[page]
        keyboard.add(telebot.types.InlineKeyboardButton(
            text=date, callback_data=f"report={date}|{cur_page}"))
        page += 1
    btn_list = []
    if next_page < len(date_sort):
        btn_list.append(telebot.types.InlineKeyboardButton(text=const.NEXT,
                                                           callback_data=f"get_report={next_page}"))
    if int(cur_page) >= 10:
        prev_page = int(cur_page) - 10
        btn_list.append(telebot.types.InlineKeyboardButton(text=const.BACK,
                                                           callback_data=f"get_report={prev_page}"))
    if len(btn_list) == 2:
        keyboard.row(btn_list[1], btn_list[0])
    elif len(btn_list) == 1:
        keyboard.row(btn_list[0])
    btn_close = telebot.types.InlineKeyboardButton(text=const.CLOSE,
                                                   callback_data="cancel")
    keyboard.row(btn_close)
    return keyboard


# –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ —Å –¥–∞—Ç–∞–º–∏
def create_date_list():
    sales_list = database.get_sales_data()
    date_list = []
    for i in range(len(sales_list)):
        date = sales_list[i][0]
        if date not in date_list:
            date_list.append(date)
    dates = []
    for i in date_list:
        date = datetime.strptime(i, "%d/%m/%Y")
        if date not in dates:
            dates.append(date)
    dates.sort()

    global date_sort
    date_sort = []
    for date in dates:
        date_str = f"{date.day}/{date.month}/{date.year}"
        date_sort.append(date_str)


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
def get_categories(method):
    keyboard = telebot.types.InlineKeyboardMarkup()
    categories = database.get_categories()

    length = len(categories)

    b = True
    if length > 0:
        for i in range(length):
            keyboard.add(telebot.types.InlineKeyboardButton(
                text=str(categories[i][1]), callback_data=f"{method}{str(categories[i][0])}"))
    else:
        b = False

    return keyboard, b


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
def get_subcategories(method, category):
    keyboard = telebot.types.InlineKeyboardMarkup()
    subcat = database.get_subcategorys(category)

    count = False

    for i in range(len(subcat)):
        if method == "subitem_add=":
            on_click = method + str(subcat[i][0])
        else:
            on_click = method + f"{str(subcat[i][0])}|{str(category)}"

        keyboard.add(
                telebot.types.InlineKeyboardButton(text=subcat[i][1], callback_data=on_click))
        count = True


    return keyboard, count


# –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–≤–∞—Ä–∞–º–∏
def get_items(keyboard, category, sub_category, delete):
    items = database.get_items(category, sub_category)
    count = False

    if not delete:
        method = "selected_item="
    else:
        method = "del_it="

    for i in range(len(items)):
        name_item = str(items[i][1])
        if not delete:
            price_item = str(items[i][3])
            count_item = str(items[i][6])

            if count_item == "file":
                item_str = f"{name_item} {price_item}—Ä—É–±."
            else:
                item_str = f"{name_item} {price_item}—Ä—É–±. ({count_item} —à—Ç.)"
        else:
            item_str = f"{name_item}"

        keyboard.add(
            telebot.types.InlineKeyboardButton(text=item_str, callback_data=f"{method}{name_item}"))
        count = True


    return keyboard, count


# –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–∫—É–ø–∫–∏
def create_buy_buttons(method_buy, method_back):
    keyboard = telebot.types.InlineKeyboardMarkup()

    keyboard.add(telebot.types.InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å", callback_data=method_buy))
    keyboard.add(telebot.types.InlineKeyboardButton(text=const.BACK, callback_data=method_back))

    return keyboard


# –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ–ø–ª–∞—Ç–æ–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
def create_check_buttons(method_url, method_check, method_back):
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(telebot.types.InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=method_url))
    keyboard.add(telebot.types.InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã", callback_data=method_check))
    keyboard.add(telebot.types.InlineKeyboardButton(text=const.BACK, callback_data=method_back))

    return keyboard


# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º
def send_admin_mes(msg):
    for i in range(len(admin.ADMIN_ID)):
        bot.send_message(admin.ADMIN_ID[i], msg)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    call_data = call.data.split("=")

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if call_data[0] == "main_menu":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        keyboard, count = get_categories("select_category=")
        if count:
            bot.send_message(call.message.chat.id, "üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", reply_markup=keyboard)
        else:
            bot.send_message(call.message.chat.id, "üòî –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

    # –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    elif call_data[0] == "select_category":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        keyboard, count = get_subcategories("subcat=", call_data[1])

        keyboard, item = get_items(keyboard, call_data[1], "", False)

        keyboard.add(telebot.types.InlineKeyboardButton(text=const.BACK, callback_data="main_menu"))

        if count is True or item is True:
            bot.send_message(call.message.chat.id, "üìô –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", reply_markup=keyboard)
        else:
            bot.send_message(call.message.chat.id,
                             "üòî –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", reply_markup=keyboard)

    # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
    elif call_data[0] == "subcat":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        categories = call_data[1].split("|")

        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard, count = get_items(keyboard, categories[1], categories[0], False)

        keyboard.add(telebot.types.InlineKeyboardButton(text=const.BACK,
                                                        callback_data=f"select_category={str(categories[1])}"))
        if count:
            bot.send_message(call.message.chat.id, "üìô –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", reply_markup=keyboard)
        else:
            bot.send_message(call.message.chat.id,
                             "üòî –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", reply_markup=keyboard)

    # –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
    elif call_data[0] == "selected_item":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        item = database.get_item(call_data[1])

        keyboard = telebot.types.InlineKeyboardMarkup()

        if str(item[5]) == "":
            method_back = f"select_category={str(item[4])}"
        else:
            method_back = f"subcat={str(item[5])}|{str(item[4])}"

        if item[6] != 0 or item[6] == "file":
            method_buy = f"buy_item={str(item[1])}"

            keyboard = create_buy_buttons(method_buy, method_back)

            bot.send_message(call.message.chat.id,
                             string_help.get_info_message(str(item[1]), str(item[2]), str(item[3]), str(item[6])),
                             reply_markup=keyboard, parse_mode="HTML")
        else:
            keyboard.add(telebot.types.InlineKeyboardButton(
                text=const.BACK, callback_data=method_back))
            bot.send_message(call.message.chat.id, "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å–µ–π—á–∞—Å –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏",
                             reply_markup=keyboard)

    # –ü–æ–∫—É–ø–∫–∞
    elif call_data[0] == "buy_item":
        bot.delete_message(call.message.chat.id, call.message.message_id)

        if not qiwi.check_available():
            bot.send_message(call.message.chat.id,
                             "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ–ø–ª–∞—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç \n –ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è")
            send_admin_mes("‚ùó –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ *QIWI* ‚ùó")
            return

        num = qiwi.num
        item = database.get_item(call_data[1])

        item_id = item[0]
        item_name = item[1]
        item_price = item[3]
        count = item[6]

        comment, qiwi_url = qiwi.create_key(item_price)

        if count == "file" or count > 0:
            message_pay = string_help.get_buy_message(item_name, num, comment, item_price)

            selected_item = f"selected_item={item_name}"

            if item_id is None:
                item_id = database.get_item(call_data[1])[0]

            check = f"check-pay={comment}|{item_id}"

            keyboard = create_check_buttons(qiwi_url, check, selected_item)
            bot.send_message(call.message.chat.id, message_pay, reply_markup=keyboard)
        else:
            bot.send_message(call.message.chat.id, "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å–µ–π—á–∞—Å –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
    elif call_data[0] == "check-pay":
        data = call_data[1].split("|")
        comment = data[0]

        item = database.get_item_by_id(data[1])

        item_name = item[1]
        item_id = database.get_item_id(item_name)
        item_price = item[3]
        count = item[6]

        is_buy_item = qiwi.payment_ver(comment, item_price)

        if is_buy_item:
            not_received = qiwi.received_item(call.message.chat.id, item_id)

            if not_received:
                item_data = database.get_item_data(item_id)
                date = datetime.now()
                day = date.day
                month = date.month
                year = date.year
                format_date = f"{day}/{month}/{year}"

                database.input_info_buy(call.message.chat.id, item_name, item_id,
                                        comment, item_price, item_data, count, format_date)

                msg = string_help.get_sold_message(call.message.chat.username, item_name, item_price)
                if count == "file":
                    bot.send_document(call.message.chat.id,
                                      open(item_data, "rb"),
                                      caption=f"‚ú® –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º {item_name} \n")
                else:
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          text=f"‚ú® –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º {item_name} \n"
                                               f"üéÅ –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞:\n*{item_data}*")
                    msg += f"\nüîπ –î–∞–Ω–Ω—ã–µ: {item_data}"

                send_admin_mes(msg)
            else:
                bot.send_message(call.from_user.id, "‚ùó –í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ ‚ùó")
        else:
            bot.answer_callback_query(callback_query_id=call.id, show_alert=True,
                                      text="‚ùó –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚ùó\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

    # –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    elif call_data[0] == "support_user":
        global theme_support
        theme_support = call_data[1]
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, "‚úè –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è")
        bot.register_next_step_handler(call.message, send_support)

    # # # # # # # # #
    # –ê–¥–º–∏–Ω –ö–æ–º–∞–Ω–¥—ã
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    elif call_data[0] == "category":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        if call_data[1] == "new_category":
            bot.send_message(call.message.chat.id, "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n*–û–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è - –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞*")
            bot.register_next_step_handler(call.message, new_category)
        else:
            global main_category
            main_category = call_data[1]
            keyboard, b = get_subcategories("subitem_add=", main_category)

            keyboard.add(telebot.types.InlineKeyboardButton(text="üìö –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä",
                                                            callback_data=f"add_item={str(main_category)}"))
            bot.send_message(call.message.chat.id,
                             "üìï –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞ \n–ò–ª–∏ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –¥–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                             reply_markup=keyboard)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    elif call_data[0] == "sub_cat_add":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        global sub_category

        keyboard = telebot.types.InlineKeyboardMarkup()
        sub = ""

        sub_cat = database.get_subcategorys(call_data[1])
        for i in range(len(sub_cat)):
            sub += f"‚ñ™ {sub_cat[i][1]}\n"

        keyboard.add(telebot.types.InlineKeyboardButton(
            text="üìù –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"new_subcategory={call_data[1]}"))

        bot.send_message(call.message.chat.id,
                         f"üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \n{sub}", reply_markup=keyboard)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    elif call_data[0] == "new_subcategory":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        global subcategory_for
        subcategory_for = call_data[1]

        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
                                               "*–û–¥–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è - –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞*")
        bot.register_next_step_handler(call.message, new_subcategory)


    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    # –í –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
    elif call_data[0] == "subitem_add":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        sub_cat = call_data[1]
        sub_category = sub_cat

        bot.send_message(call.message.chat.id, "üìö –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
        bot.register_next_step_handler(call.message, add_item_name)

    # –í –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    elif call_data[0] == "add_item":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        sub_category = ""

        bot.send_message(call.message.chat.id, "üìö –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
        bot.register_next_step_handler(call.message, add_item_name)

    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≥–¥–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
    # –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    elif call_data[0] == "all_cat_del":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        keyboard, b = get_categories("cat_del=")

        bot.send_message(call.message.chat.id, "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞", reply_markup=keyboard)

    # –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    elif call_data[0] == "cat_del":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        keyboard, b = get_subcategories("del_it_sub=", call_data[1])
        keyboard, count = get_items(keyboard, call_data[1], "", True)

        keyboard.add(telebot.types.InlineKeyboardButton(text=const.BACK,
                                                        callback_data="all_cat_del="))
        bot.send_message(call.message.chat.id, "üìô –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä\–∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=keyboard)

    # –≤—ã–±—Ä–∞–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
    elif call_data[0] == "del_it_sub":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        keyboard = telebot.types.InlineKeyboardMarkup()

        categories = call_data[1].split("|")

        keyboard, count = get_items(keyboard, categories[1], categories[0], True)
        keyboard.add(telebot.types.InlineKeyboardButton(text=const.BACK,
                                                        callback_data="cat_del=" + str(categories[1])))
        bot.send_message(call.message.chat.id, "üìô –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=keyboard)

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    elif call_data[0] == "del_it":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(
            telebot.types.InlineKeyboardButton(text=const.YES, callback_data=f"del_item={call_data[1]}"))
        keyboard.add(
            telebot.types.InlineKeyboardButton(text=const.NO, callback_data="main_menu"))

        bot.send_message(call.message.chat.id, f"‚ùì –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä *{call_data[1]}*‚ùì", reply_markup=keyboard)
    elif call_data[0] == "del_item":
        bot.delete_message(call.message.chat.id, call.message.message_id)

        database.delete_item(call_data[1])
        bot.send_message(call.message.chat.id, f"‚ùó –¢–æ–≤–∞—Ä *{call_data[1]}* —É–¥–∞–ª–µ–Ω")

    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    elif call_data[0] == "categ_del":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        keyboard, b = get_subcategories("!del_subcat=", call_data[1])
        keyboard.add(telebot.types.InlineKeyboardButton(text="üö´ –£–¥–∞–ª–∏—Ç—å –≤—Å—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                                                        callback_data=f"!del_cat={str(call_data[1])}"))
        bot.send_message(call.message.chat.id, "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=keyboard)

    # —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    elif call_data[0] == "!del_cat":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        keyboard = telebot.types.InlineKeyboardMarkup()

        keyboard.add(
            telebot.types.InlineKeyboardButton(text=const.YES, callback_data=f"del_cat={call_data[1]}"))
        keyboard.add(
            telebot.types.InlineKeyboardButton(text=const.NO, callback_data="cancel"))

        bot.send_message(call.message.chat.id, f"‚ùì –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é *{database.get_category(call_data[1])}*‚ùì \n"
                                               "*–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –í–°–ï –¢–û–í–ê–†–´ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*", reply_markup=keyboard)
    elif call_data[0] == "del_cat":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        category = database.get_category(call_data[1])
        database.delete_category(call_data[1])
        bot.send_message(call.message.chat.id, f"‚ùó –ö–∞—Ç–µ–≥–æ—Ä–∏—è *{category}* —É–¥–∞–ª–µ–Ω–∞")

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    elif call_data[0] == "!del_subcat":
        cat = call_data[1].split("|")

        bot.delete_message(call.message.chat.id, call.message.message_id)
        keyboard = telebot.types.InlineKeyboardMarkup()
        sub_cat = database.get_subcategory(cat[0])
        keyboard.add(
            telebot.types.InlineKeyboardButton(text=const.YES, callback_data=f"del_subcat={call_data[1]}"))
        keyboard.add(
            telebot.types.InlineKeyboardButton(text=const.NO, callback_data="cancel"))

        bot.send_message(call.message.chat.id, f"‚ùì –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é *{sub_cat}*‚ùì \n"
                                               "*–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –í–°–ï –¢–û–í–ê–†–´ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*", reply_markup=keyboard)
    elif call_data[0] == "del_subcat":
        bot.delete_message(call.message.chat.id, call.message.message_id)

        cat = call_data[1].split("|")
        c = database.get_category(cat[1])
        sc = database.get_subcategory(cat[0])
        database.delete_subcategory(cat[0], cat[1])
        bot.send_message(call.message.chat.id, f"‚ùó –ö–∞—Ç–µ–≥–æ—Ä–∏—è *{sc}* —É–¥–∞–ª–µ–Ω–∞")

    # –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ
    elif call_data[0] == "ans_sup":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        global chat_id_answer
        chat_id_answer = call_data[1]

        bot.send_message(call.message.chat.id, "‚úè –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç")
        bot.register_next_step_handler(call.message, send_support_answer)

    # –£–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ
    elif call_data[0] == "del_sup":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        database.delete_support(call_data[1])

    # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    elif call_data[0] == "edit_supmes":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        bot.register_next_step_handler(call.message, edit_sup_mes)

    # —Å–ª–µ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—á–µ—Ç–∞
    elif call_data[0] == "get_report":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        keyboard = create_report_keyboard(call_data[1])
        bot.send_message(call.message.chat.id, "üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞", reply_markup=keyboard)

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞
    elif call_data[0] == "report":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        keyboard = telebot.types.InlineKeyboardMarkup()
        temp = call_data[1].split("|")

        data = database.get_sales_info_day(temp[0])
        msg = f"üìÜ –û—Ç—á–µ—Ç –∑–∞ {temp[0]}\n\n"

        buyer_list = []
        sum = 0
        for i in range(len(data)):
            buyer = data[i][0]
            if buyer not in buyer_list:
                msg += f"‚ûñ {buyer}\n"
                for j in range(len(data)):
                    if data[j][0] == buyer:
                        msg += f"  ‚ñ™ {data[j][1]} : {data[j][4]} —Ä—É–±.\n"
                        sum += int(data[j][4])
                buyer_list.append(buyer)
            else:
                continue

        msg += f"\nüí∞ –ü—Ä–∏–±—ã–ª—å: {sum} —Ä—É–±."

        keyboard.add(telebot.types.InlineKeyboardButton(text=const.BACK,
                                                        callback_data=f"get_report={temp[1]}"))
        keyboard.add(telebot.types.InlineKeyboardButton(text=const.CLOSE,
                                                        callback_data="cancel"))

        bot.send_message(call.message.chat.id, msg, reply_markup=keyboard)

    # –ö–æ—à–µ–ª—å–∫–∏
    elif call_data[0] == "payment":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å",
                                                        callback_data=f"check={call_data[1]}"))
        keyboard.add(telebot.types.InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫",
                                                        callback_data=f"edit={call_data[1]}"))
        if call_data[1] == "qiwi":
            bot.send_message(call.message.chat.id, "ü•ù QIWI-–ö–æ—à–µ–ª–µ–∫", reply_markup=keyboard)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤
    elif call_data[0] == "check":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        if call_data[1] == "qiwi":
            if qiwi.check_available():
                bot.send_message(call.message.chat.id, "‚úÖ –ö–æ—à–µ–ª–µ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                bot.send_message(call.message.chat.id, "‚ùó –ö–æ—à–µ–ª–µ–∫ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–∑–º–µ–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω ‚ùó")

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤
    elif call_data[0] == "edit":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        if call_data[1] == "qiwi":
            bot.send_message(call.message.chat.id, "‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞")
            bot.register_next_step_handler(call.message, qiwi_payment)

    # –û—Ç–º–µ–Ω–∞
    elif call_data[0] == "cancel":
        bot.delete_message(call.message.chat.id, call.message.message_id)

# FAQ
def edit_faq(message):
    if const.not_const(message.text):
        database.input_faq(message.text)
        bot.send_message(message.from_user.id, "‚Ñπ FAQ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
    else:
        bot.send_message(message.from_user.id, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùó")
        return


# –†–∞—Å—Å—ã–ª–∫–∞
@async_dec()
def create_sending(message):
    user_list = database.get_user_list()

    sending_text = message.text
    all_send_mes = 0
    limit = 0

    if const.not_const(message.text):
        for i in range(len(user_list)):
            try:
                if limit <= 20:
                    bot.send_message(user_list[i][0], sending_text)
                    limit += 1
                    all_send_mes += 1
                else:
                    limit = 0
                    time.sleep(2)
            except:
                continue

        bot.send_message(message.from_user.id, string_help.get_text_send(all_send_mes))
    else:
        bot.send_message(message.from_user.id, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùó")
        return

# —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
def get_support_messages(message, state):
    appeals = database.get_support_mes(state)
    length = len(appeals)

    if int(length) > 0:
        counter = 0
        for i in range(length):
            if counter <= 20:
                mes = f"üîπ ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{appeals[i][1]}</b>\n" \
                      f"üîπ –¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: {appeals[i][3]}\n" \
                      f"üîπ –°–æ–æ–±—â–µ–Ω–∏–µ: {appeals[i][2]}\n"

                keyboard = telebot.types.InlineKeyboardMarkup()
                btn_delete = telebot.types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å",
                                                                callback_data=f"del_sup={str(appeals[i][0])}")
                if state is False:
                    ans_sup = f"ans_sup={appeals[i][0]}"
                    keyboard.add(telebot.types.InlineKeyboardButton(text="‚úè –û—Ç–≤–µ—Ç–∏—Ç—å",
                                                                    callback_data=ans_sup))
                    btn_1 = telebot.types.InlineKeyboardButton(text="üì¶ –û—Ç–ª–æ–∂–∏—Ç—å", callback_data="cancel")
                    keyboard.row(btn_1, btn_delete)
                else:
                    mes += f"üîπ –û—Ç–≤–µ—Ç:\n {appeals[i][6]}"

                    keyboard.row(btn_delete)

                bot.send_message(message.from_user.id, mes, reply_markup=keyboard, parse_mode="HTML")
                counter += 1
            else:
                counter = 0
                time.sleep(2)

    else:
        bot.send_message(message.from_user.id, "üö´ –û–±—Ä–∞—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


# –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
def send_support(message):
    if const.not_const(message.text):
        if message.text is not None:
            id_user = message.chat.id
            support_mess = message.text
            support_theme = theme_support

            database.send_appeal(id_user, support_mess, support_theme)

            msg = "‚ùó *–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É*\n" \
                  f"üîπ ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: *{message.from_user.username}*\n" \
                  f"üîπ –¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: {support_theme}\n" \
                  f"üîπ –°–æ–æ–±—â–µ–Ω–∏–µ: {support_mess}"

            send_admin_mes(msg)

            bot.send_message(message.from_user.id,
                             "‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ\n‚è≤–ñ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")
        else:
            bot.send_message(message.from_user.id, "‚ùó –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º ‚ùó")
            return
    else:
        bot.send_message(message.from_user.id, "‚ùó –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ —Å–µ–±–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ ‚ùó")
        return

# –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ
def send_support_answer(message):
    id_chat = chat_id_answer

    if const.not_const(message.text):
        answer = str(message.text)
        user_id = database.send_appeal_answer(id_chat, answer)
        mes = f"‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ: \n\n" + answer

        bot.send_message(user_id, mes)
        send_admin_mes(f"{message.chat.username} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ—Ç {user_id} \n{answer}")
    else:
        bot.send_message(message.from_user.id, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùó")
        return

# —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
def edit_sup_mes(message):
    msg = str(message.text)

    if const.not_const(msg):
        database.input_sup_mes(msg)
        bot.send_message(message.from_user.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    else:
        bot.send_message(message.from_user.id, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùó")
        return


# –ö–æ—à–µ–ª—å–∫–∏
# QIWI
def qiwi_payment(message):
    if const.not_const(message.text):
        global qiwi_number
        qiwi_number = message.text

        bot.send_message(message.from_user.id, "‚úè –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω QIWI")
        bot.register_next_step_handler(message, qiwi_token_payment)
    else:
        bot.send_message(message.from_user.id, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùó")
        return


# —Ç–æ–∫–µ–Ω
def qiwi_token_payment(message):
    bot.send_message(message.from_user.id, "üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—à–µ–ª—å–∫–∞...")
    try:
        bot.delete_message(message.chat.id, message.message_id)
        qiwi_update = qiwi.check_available_data(message.text, qiwi_number)
        if qiwi_update:
            database.input_qiwi(message.text, qiwi_number)
            bot.send_message(message.from_user.id, "üîê –¢–æ–∫–µ–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
        else:
            bot.send_message(message.from_user.id, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω ‚ùó")

    except:
        bot.delete_message(message.chat.id, message.message_id)
        bot.send_message(message.from_user.id, "‚ùó –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞ ‚ùó")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ / –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# –ö–∞—Ç–µ–≥–æ—Ä–∏—è
def new_category(message):
    global main_category
    main_category = str(message.text)

    cat_list = main_category.split("\n")
    count = 0

    for i in range(len(cat_list)):
        if not database.get_category_name(cat_list[i]) and const.not_const(cat_list[i]):
            database.input_category(cat_list[i])
            count += 1

    bot.send_message(message.from_user.id, string_help.get_text_cat(count))


# –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
def new_subcategory(message):
    sub_category = str(message.text)
    subcat_for = subcategory_for

    sub_list = sub_category.split("\n")

    count = 0
    for i in range(len(sub_list)):
        if not database.get_subcat_name(sub_list[i]) and const.not_const(sub_list[i]):
            database.input_subcategory(sub_list[i], subcat_for)

            count += 1

    bot.send_message(message.from_user.id, string_help.get_text_cat(count))


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
# –ù–∞–∑–≤–∞–Ω–∏–µ
def add_item_name(message):
    global name
    name = message.text
    if const.not_const(name):
        bot.send_message(message.from_user.id, "‚úè –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
        bot.register_next_step_handler(message, add_item_desc)
    else:
        bot.send_message(message.from_user.id, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùó")
        return


# –û–ø–∏—Å–∞–Ω–∏–µ
def add_item_desc(message):
    global desc
    desc = message.text
    if const.not_const(desc):
        bot.send_message(message.from_user.id, "üíµ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ (–≤ —Ä—É–±–ª—è—Ö)")
        bot.register_next_step_handler(message, add_item_price)
    else:
        bot.send_message(message.from_user.id, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùó")
        return


# –¶–µ–Ω–∞
def add_item_price(message):
    global price

    try:
        price = int(message.text)
        if const.not_const(price):
            bot.send_message(message.from_user.id, "üîê –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ \n*–û–¥–∏–Ω —Ç–æ–≤–∞—Ä - –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞* \n"
                                                   "üíæ –ò–ª–∏ –∂–µ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—Ä—Ö–∏–≤ –∏–ª–∏ —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–æ–º")
            bot.register_next_step_handler(message, add_item_data)
        else:
            bot.send_message(message.from_user.id, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùó")
            return
    except Exception:
        bot.send_message(message.from_user.id, "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ ‚ùó")
        bot.send_message(message.from_user.id, "üíµ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ (–≤ —Ä—É–±–ª—è—Ö)")
        bot.register_next_step_handler(message, add_item_price)


# –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
def add_item_data(message):
    name_item = name
    desc_item = desc
    price_item = price
    category_item = main_category

    try:
        subcategory_item = sub_category
    except Exception:
        subcategory_item = ""

    if message.document is not None:
        # –∞—Ä—Ö–∏–≤
        try:
            file_info = bot.get_file(message.document.file_id)
            file_info = file_info.wait()
            downloaded_file = bot.download_file(file_info.file_path)
            downloaded_file = downloaded_file.wait()

            folder = f"items"
            if not os.path.exists(folder):
                os.mkdir(folder)

            src = f"{folder}/{message.document.file_name}"
            with open(src, 'wb') as new_file:
                new_file.write(downloaded_file)
        except:
            bot.send_message(message.from_user.id, "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ‚ùó")
            return

        database.input_item_file(name_item, desc_item, price_item, subcategory_item, category_item, src)

        bot.send_message(message.from_user.id, "üì¶ –¢–æ–≤–∞—Ä –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω")
    else:
        # —Ç–µ–∫—Å—Ç
        global data
        data = str(message.text)
        data_list = data.split("\n")

        if const.not_const(data_list):
            count = len(data_list)
            database.input_item(name_item, desc_item, price_item, subcategory_item, category_item, data_list)

            bot.send_message(message.from_user.id, string_help.get_text_itmes(count))
        else:
            bot.send_message(message.from_user.id, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùó")
            return


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    while True:
        try:
            print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
            bot.polling(none_stop=True)
        except Exception as e:
            print(e)
            time.sleep(5)
